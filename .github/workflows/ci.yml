name: Continuous Integration

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  tests:
    name: "Tests Validation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: ".bun-version"

      - name: Install dependencies (with dev)
        run: bun run ci --include=dev

      - name: Run test and coverage
        run: bun run test -- --coverage

  commitlint:
    name: "Commitlint Validation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: ".bun-version"

      - name: Install dependencies (with dev)
        run: npm ci --include=dev

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: npx commitlint --from HEAD~1 --to HEAD --verbose

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

  eslint:
    name: "Eslint Validation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: ".bun-version"

      - name: Install dependencies
        run: npm ci

      - name: Run Eslint
        run: npm run lint

  build:
    name: "Build from source"
    needs:
      - tests
      - commitlint
      - eslint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: ".bun-version"

      - name: Install dependencies
        run: npm ci

      - name: Build from source
        run: npm run build

  docker:
    name: "Build docker image"
    needs:
      - build
    runs-on: ubuntu-latest
    # Only run on PR. CD will handle build & deployment when pushing to "main"
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}"
          push: false
          tags: 'latest'
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,
          cache-from: type=gha
          cache-to: type=gha,mode=max
